// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
function buildInfrastructure(type) {
    if (!window.simulation) return;
    
    try {
        const infrastructure = window.simulation.buildInfrastructure(type);
        updateUI();
        
        const config = CONFIG.INFRASTRUCTURE_TYPES[type];
        console.log(`üèóÔ∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ${config.name}`);
        return infrastructure;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:', error);
        alert(`–û—à–∏–±–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞: ${error.message}`);
    }
}

function autoMaintainInfrastructure() {
    if (!window.simulation) return;
    
    let maintainedCount = 0;
    let totalCost = 0;
    
    window.simulation.infrastructure.forEach(infra => {
        if (infra.condition < 80 && window.simulation.publicFunds >= infra.getMaintenanceCost()) {
            window.simulation.publicFunds -= infra.getMaintenanceCost();
            infra.maintain();
            maintainedCount++;
            totalCost += infra.getMaintenanceCost();
        }
    });
    
    if (maintainedCount > 0) {
        updateUI();
        console.log(`üîß –û–±—Å–ª—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${maintainedCount}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${Math.round(totalCost)} –ü–ü`);
        alert(`‚úÖ –û–±—Å–ª—É–∂–µ–Ω–æ ${maintainedCount} –æ–±—ä–µ–∫—Ç–æ–≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞ ${Math.round(totalCost)} –ü–ü`);
    } else {
        alert('‚ùå –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
    }
}

function upgradeInfrastructure(infrastructureId) {
    if (!window.simulation) return;
    
    const infra = window.simulation.infrastructure.find(i => i.id === infrastructureId);
    if (!infra) return;
    
    const upgradeCost = infra.getMaintenanceCost() * 5;
    
    if (window.simulation.publicFunds >= upgradeCost) {
        window.simulation.publicFunds -= upgradeCost;
        const success = infra.upgrade();
        
        if (success) {
            updateUI();
            console.log(`‚¨ÜÔ∏è –£–ª—É—á—à–µ–Ω–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ${CONFIG.INFRASTRUCTURE_TYPES[infra.type].name} –¥–æ —É—Ä–æ–≤–Ω—è ${infra.level}`);
            alert(`‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–ª—É—á—à–µ–Ω–∞ –¥–æ —É—Ä–æ–≤–Ω—è ${infra.level}!`);
        } else {
            alert('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è');
        }
    } else {
        alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. –ù—É–∂–Ω–æ: ${Math.round(upgradeCost)} –ü–ü`);
    }
}

function repairInfrastructure(infrastructureId) {
    if (!window.simulation) return;
    
    const infra = window.simulation.infrastructure.find(i => i.id === infrastructureId);
    if (!infra) return;
    
    const repairCost = infra.getMaintenanceCost() * 2;
    
    if (window.simulation.publicFunds >= repairCost) {
        window.simulation.publicFunds -= repairCost;
        infra.maintain();
        updateUI();
        
        console.log(`üîß –û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ${CONFIG.INFRASTRUCTURE_TYPES[infra.type].name}`);
        alert(`‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${Math.round(repairCost)} –ü–ü!`);
    } else {
        alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞. –ù—É–∂–Ω–æ: ${Math.round(repairCost)} –ü–ü`);
    }
}