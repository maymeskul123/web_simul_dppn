// analytics-ui.js - UI –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
function updateAnalytics() {
    if (!window.simulation) return;
    
    const stats = window.simulation.getStats();
    const history = window.simulation.history;
    
    // –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    document.getElementById('analyticsGDP').textContent = Math.round(stats.totalPP);
    document.getElementById('analyticsGrowth').textContent = history.length > 1 ? 
        Math.round(((history[history.length-1].totalPP - history[0].totalPP) / history[0].totalPP) * 100) : 0;
    document.getElementById('analyticsInflation').textContent = Math.round(stats.month * 0.5);
    document.getElementById('analyticsUnemployment').textContent = Math.max(0, 100 - (stats.averageSatisfaction || 50));
    document.getElementById('analyticsProductivity').textContent = Math.round((stats.averagePP / 100) * 100);
    
    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    document.getElementById('analyticsQualityOfLife').textContent = Math.round(calculateQualityOfLife(stats));
    document.getElementById('analyticsSatisfaction').textContent = Math.round(stats.averageSatisfaction);
    document.getElementById('analyticsEducation').textContent = Math.round(stats.infrastructureLevels?.education || 0);
    document.getElementById('analyticsHealthcare').textContent = Math.round(stats.infrastructureLevels?.healthcare || 0);
    document.getElementById('analyticsMobility').textContent = Math.round(stats.infrastructureLevels?.mobility || 0);
    
    // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    document.getElementById('analyticsInnovation').textContent = Math.round(calculateInnovationIndex(stats));
    document.getElementById('analyticsTechDevelopment').textContent = Math.round((stats.infrastructureCount / 10) * 100);
    document.getElementById('analyticsInfrastructureIndex').textContent = Math.round(stats.infrastructureEfficiency);
    document.getElementById('analyticsDigitalization').textContent = Math.round((stats.totalInvested / Math.max(1, stats.totalPP)) * 100);
    document.getElementById('analyticsResearch').textContent = Math.round((stats.infrastructureLevels?.education || 0) * 0.6);
    
    // –¢–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã
    document.getElementById('analyticsStability').textContent = Math.round(calculateStabilityIndex(history));
    document.getElementById('analyticsSustainability').textContent = Math.round((calculateStabilityIndex(history) + (history.length > 1 ? 
        ((history[history.length-1].totalPP - history[0].totalPP) / history[0].totalPP) * 100 : 0)) / 2);
    document.getElementById('analyticsForecast').textContent = Math.round((history.length > 1 ? 
        ((history[history.length-1].totalPP - history[0].totalPP) / history[0].totalPP) * 100 : 5) * 0.8);
    document.getElementById('analyticsRisks').textContent = Math.round(100 - calculateStabilityIndex(history));
    document.getElementById('analyticsEfficiency').textContent = Math.round(calculateSystemEfficiency(stats));
    
    // –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    document.getElementById('metricAvgPPGrowth').textContent = history.length > 1 ? 
        Math.round(((history[history.length-1].totalPP - history[0].totalPP) / history[0].totalPP) * 100) : 0;
    document.getElementById('metricInvestmentEfficiency').textContent = Math.round(stats.monthlyInvestmentIncome / Math.max(1, stats.totalInvestment) * 100);
    document.getElementById('metricInfraROI').textContent = Math.round(stats.infrastructureCount > 0 ? 
        (stats.totalPP / Math.max(1, stats.infrastructureCount * 1000)) : 0);
    document.getElementById('metricSocialCapital').textContent = Math.round((stats.averageSatisfaction + (stats.totalSocial / Math.max(1, stats.totalPP) * 100)) / 2);
    document.getElementById('metricDevelopmentIndex').textContent = Math.round(calculateQualityOfLife(stats));
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
    updateHistoryChart(history);
    
    console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞');
}

function calculateQualityOfLife(stats) {
    const factors = [
        stats.averageSatisfaction || 0,
        (stats.infrastructureLevels?.education || 0),
        (stats.infrastructureLevels?.healthcare || 0),
        (stats.infrastructureLevels?.mobility || 0),
        (stats.totalPP / Math.max(1, stats.totalResidents)) / 10
    ];
    
    return factors.reduce((sum, factor) => sum + factor, 0) / factors.length;
}

function calculateInnovationIndex(stats) {
    const factors = [
        (stats.totalInvested / Math.max(1, stats.totalPP)) * 100,
        stats.infrastructureLevels?.education || 0,
        (stats.investments.length / Math.max(1, stats.totalResidents)) * 100,
        stats.infrastructureEfficiency
    ];
    
    return Math.min(100, factors.reduce((sum, factor) => sum + factor, 0) / factors.length);
}

function calculateStabilityIndex(history) {
    if (history.length < 3) return 50;
    
    const satisfactionValues = history.map(h => h.averageSatisfaction);
    const variance = calculateVariance(satisfactionValues);
    
    // –ú–µ–Ω—å—à–µ –¥–∏—Å–ø–µ—Ä—Å–∏—è = –±–æ–ª—å—à–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    return Math.max(0, 100 - (variance * 10));
}

function calculateVariance(values) {
    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;
    const squareDiffs = values.map(value => Math.pow(value - mean, 2));
    return squareDiffs.reduce((sum, diff) => sum + diff, 0) / values.length;
}

function calculateSystemEfficiency(stats) {
    const factors = [
        stats.averageSatisfaction,
        stats.infrastructureEfficiency,
        (stats.monthlyInvestmentIncome / Math.max(1, stats.totalInvestment)) * 1000,
        (stats.totalPP / Math.max(1, stats.totalResidents)) / 2
    ];
    
    return factors.reduce((sum, factor) => sum + factor, 0) / factors.length;
}

function updateHistoryChart(history) {
    const chartContainer = document.getElementById('historyChart');
    if (!chartContainer || history.length < 2) {
        chartContainer.innerHTML = '<p style="text-align: center; color: #666; padding: 2rem;">–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–∑–≤–∏—Ç–∏—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö</p>';
        return;
    }
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ü–ü
    let chartHTML = '<div style="font-family: monospace; font-size: 12px; line-height: 1.2;">';
    chartHTML += '<div style="margin-bottom: 10px; font-weight: bold;">üìà –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –ü–ü:</div>';
    
    const maxPP = Math.max(...history.map(h => h.totalPP));
    const chartHeight = 8;
    const chartWidth = Math.min(20, history.length);
    
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    const recentHistory = history.slice(-chartWidth);
    
    for (let i = 0; i < chartHeight; i++) {
        let line = '';
        const threshold = maxPP * (chartHeight - i) / chartHeight;
        
        recentHistory.forEach(month => {
            line += month.totalPP >= threshold ? '‚ñà' : '‚ñë';
        });
        
        chartHTML += `<div>${line}</div>`;
    }
    
    // –ü–æ–¥–ø–∏—Å–∏ –º–µ—Å—è—Ü–µ–≤
    let monthsLine = '';
    recentHistory.forEach((month, index) => {
        if (index % 3 === 0) {
            monthsLine += `M${month.month}`.padEnd(4, ' ');
        } else {
            monthsLine += '    ';
        }
    });
    chartHTML += `<div style="margin-top: 5px;">${monthsLine}</div>`;
    
    // –õ–µ–≥–µ–Ω–¥–∞
    chartHTML += `<div style="margin-top: 10px; font-size: 10px; color: #666;">`;
    chartHTML += `–ú–∞–∫—Å: ${Math.round(maxPP)} –ü–ü | –í—Å–µ–≥–æ –º–µ—Å—è—Ü–µ–≤: ${history.length}`;
    chartHTML += `</div>`;
    
    chartHTML += '</div>';
    chartContainer.innerHTML = chartHTML;
}

// –§—É–Ω–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
function generateEconomicReport() {
    if (!window.simulation) return;
    
    const stats = window.simulation.getStats();
    const report = `
üìä –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ DPPN
============================

üìÖ –ü–µ—Ä–∏–æ–¥: ${stats.month} –º–µ—Å—è—Ü–µ–≤
üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: ${stats.totalResidents} –∂–∏—Ç–µ–ª–µ–π

üí∏ –§–ò–ù–ê–ù–°–´:
‚Ä¢ –û–±—â–∏–π –ü–ü: ${Math.round(stats.totalPP)}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ü–ü: ${Math.round(stats.averagePP)}
‚Ä¢ –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ–Ω–¥—ã: ${Math.round(stats.publicFunds)}

üè¢ –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê:
‚Ä¢ –û–±—ä–µ–∫—Ç–æ–≤: ${stats.infrastructureCount}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–≤–∏—Ç–∏—è: ${stats.infrastructureLevel}
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${Math.round(stats.infrastructureEfficiency)}%

üíº –ò–ù–í–ï–°–¢–ò–¶–ò–ò:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: ${stats.activeInvestments}
‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: ${Math.round(stats.totalInvestment)}
‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: ${Math.round(stats.monthlyInvestmentIncome)}
    `;
    
    alert(report);
    console.log('üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç');
}

function generateSocialReport() {
    if (!window.simulation) return;
    
    const stats = window.simulation.getStats();
    const report = `
üë• –°–û–¶–ò–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ DPPN
========================

üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –ñ–∏—Ç–µ–ª–µ–π: ${stats.totalResidents}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(stats.averageSatisfaction)}%
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏: ${Math.round(calculateQualityOfLife(stats))}/100

üéØ –ê–ö–¢–ò–í–ù–û–°–¢–¨:
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: ${Math.round(stats.infrastructureLevels.education || 0)}/100
‚Ä¢ –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${Math.round(stats.infrastructureLevels.healthcare || 0)}/100
‚Ä¢ –ú–æ–±–∏–ª—å–Ω–æ—Å—Ç—å: ${Math.round(stats.infrastructureLevels.mobility || 0)}/100
    `;
    
    alert(report);
    console.log('üë• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç');
}

function generateInfrastructureReport() {
    if (!window.simulation) return;
    
    const stats = window.simulation.getStats();
    const report = `
üè¢ –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ù–´–ô –û–¢–ß–ï–¢ DPPN
================================

üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${stats.infrastructureCount}
‚Ä¢ –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${stats.infrastructureLevel}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${Math.round(stats.infrastructureEfficiency)}%

‚ö° –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: +${Math.round((stats.infrastructureLevels.education || 0) * 10)}%
‚Ä¢ –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: +${Math.round((stats.infrastructureLevels.healthcare || 0) * 10)}%
‚Ä¢ –ú–æ–±–∏–ª—å–Ω–æ—Å—Ç—å: +${Math.round((stats.infrastructureLevels.mobility || 0) * 10)}%
    `;
    
    alert(report);
    console.log('üè¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –æ—Ç—á–µ—Ç');
}

function generateInvestmentReport() {
    if (!window.simulation) return;
    
    const stats = window.simulation.getStats();
    const report = `
üíº –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–´–ô –û–¢–ß–ï–¢ DPPN
=============================

üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${window.simulation.investments.length}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activeInvestments}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${stats.completedInvestments}

üí∞ –§–ò–ù–ê–ù–°–´:
‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: ${Math.round(stats.totalInvestment)} –ü–ü
‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: ${Math.round(stats.monthlyInvestmentIncome)} –ü–ü
‚Ä¢ –ê–≤—Ç–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: ${stats.autoInvestEnabled ? '–í–∫–ª—é—á–µ–Ω—ã ‚úÖ' : '–í—ã–∫–ª—é—á–µ–Ω—ã ‚ùå'}
    `;
    
    alert(report);
    console.log('üíº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç');
}

function exportAllData() {
    if (!window.simulation) return;
    
    const data = {
        simulation: window.simulation.getStats(),
        residents: window.simulation.residents.length,
        infrastructure: window.simulation.infrastructure.length,
        investments: window.simulation.investments.length,
        exportDate: new Date().toISOString()
    };
    
    const json = JSON.stringify(data, null, 2);
    const blob = new Blob([json], { type: 'application/json' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.setAttribute('hidden', '');
    a.setAttribute('href', url);
    a.setAttribute('download', 'dppn_simulation_data.json');
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    
    console.log('üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏');
}