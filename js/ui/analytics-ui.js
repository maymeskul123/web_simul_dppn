// UI –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
function updateAnalytics() {
    if (!simulation) return;
    
    const stats = simulation.getStats();
    const history = simulation.history;
    
    // –†–∞—Å—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    const gdp = stats.totalPP + stats.totalInvestment;
    const qualityOfLife = calculateQualityOfLife(stats);
    const growth = calculateGrowthRate(history);
    const innovation = calculateInnovationIndex(stats);
    const stability = calculateStabilityIndex(history);
    
    // –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    document.getElementById('analyticsGDP').textContent = Math.round(gdp);
    document.getElementById('analyticsGrowth').textContent = Math.round(growth);
    document.getElementById('analyticsInflation').textContent = Math.round(growth * 0.3); // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
    document.getElementById('analyticsUnemployment').textContent = Math.round(100 - stats.averageSatisfaction);
    document.getElementById('analyticsProductivity').textContent = Math.round((stats.averagePP / 100) * 100);
    
    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    document.getElementById('analyticsQualityOfLife').textContent = Math.round(qualityOfLife);
    document.getElementById('analyticsSatisfaction').textContent = Math.round(stats.averageSatisfaction);
    document.getElementById('analyticsEducation').textContent = Math.round(stats.infrastructureLevels.education || 0);
    document.getElementById('analyticsHealthcare').textContent = Math.round(stats.infrastructureLevels.healthcare || 0);
    document.getElementById('analyticsMobility').textContent = Math.round(stats.infrastructureLevels.mobility || 0);
    
    // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    document.getElementById('analyticsInnovation').textContent = Math.round(innovation);
    document.getElementById('analyticsTechDevelopment').textContent = Math.round(innovation * 0.8);
    document.getElementById('analyticsInfrastructureIndex').textContent = Math.round(stats.infrastructureEfficiency);
    document.getElementById('analyticsDigitalization').textContent = Math.round((stats.totalInvested / Math.max(1, stats.totalPP)) * 100);
    document.getElementById('analyticsResearch').textContent = Math.round(innovation * 0.6);
    
    // –¢–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã
    document.getElementById('analyticsStability').textContent = Math.round(stability);
    document.getElementById('analyticsSustainability').textContent = Math.round((stability + growth) / 2);
    document.getElementById('analyticsForecast').textContent = Math.round(growth * 0.8); // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤
    document.getElementById('analyticsRisks').textContent = Math.round(100 - stability);
    document.getElementById('analyticsEfficiency').textContent = Math.round(calculateSystemEfficiency(stats));
    
    // –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    updateKeyMetrics(stats, history);
    
    console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞');
}

function calculateQualityOfLife(stats) {
    const factors = [
        stats.averageSatisfaction,
        stats.infrastructureLevels.education || 0,
        stats.infrastructureLevels.healthcare || 0,
        stats.infrastructureLevels.mobility || 0,
        (stats.totalPP / Math.max(1, stats.totalResidents)) / 10
    ];
    
    return factors.reduce((sum, factor) => sum + factor, 0) / factors.length;
}

function calculateGrowthRate(history) {
    if (history.length < 2) return 0;
    
    const recent = history.slice(-6); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
    if (recent.length < 2) return 0;
    
    const first = recent[0].totalPP;
    const last = recent[recent.length - 1].totalPP;
    
    return ((last - first) / first) * 100;
}

function calculateInnovationIndex(stats) {
    const factors = [
        (stats.totalInvested / Math.max(1, stats.totalPP)) * 100,
        stats.infrastructureLevels.education || 0,
        (stats.investments.length / Math.max(1, stats.totalResidents)) * 100,
        stats.infrastructureEfficiency
    ];
    
    return Math.min(100, factors.reduce((sum, factor) => sum + factor, 0) / factors.length);
}

function calculateStabilityIndex(history) {
    if (history.length < 3) return 50;
    
    const satisfactionValues = history.map(h => h.averageSatisfaction);
    const variance = calculateVariance(satisfactionValues);
    
    // –ú–µ–Ω—å—à–µ –¥–∏—Å–ø–µ—Ä—Å–∏—è = –±–æ–ª—å—à–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    return Math.max(0, 100 - (variance * 10));
}

function calculateVariance(values) {
    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;
    const squareDiffs = values.map(value => Math.pow(value - mean, 2));
    return squareDiffs.reduce((sum, diff) => sum + diff, 0) / values.length;
}

function calculateSystemEfficiency(stats) {
    const factors = [
        stats.averageSatisfaction,
        stats.infrastructureEfficiency,
        (stats.monthlyInvestmentIncome / Math.max(1, stats.totalInvestment)) * 1000,
        (stats.totalPP / Math.max(1, stats.totalResidents)) / 2
    ];
    
    return factors.reduce((sum, factor) => sum + factor, 0) / factors.length;
}

function updateKeyMetrics(stats, history) {
    // –°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç –ü–ü
    const ppGrowth = calculateGrowthRate(history);
    document.getElementById('metricAvgPPGrowth').textContent = Math.round(ppGrowth);
    
    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    const investmentEfficiency = stats.monthlyInvestmentIncome / Math.max(1, stats.totalInvestment) * 100;
    document.getElementById('metricInvestmentEfficiency').textContent = Math.round(investmentEfficiency);
    
    // –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const infraROI = stats.infrastructureCount > 0 ? 
        (stats.totalPP / Math.max(1, stats.infrastructureCount * 1000)) : 0;
    document.getElementById('metricInfraROI').textContent = Math.round(infraROI);
    
    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
    const socialCapital = (stats.averageSatisfaction + (stats.totalSocial / Math.max(1, stats.totalPP) * 100)) / 2;
    document.getElementById('metricSocialCapital').textContent = Math.round(socialCapital);
    
    // –ò–Ω–¥–µ–∫—Å —Ä–∞–∑–≤–∏—Ç–∏—è
    const developmentIndex = (ppGrowth + investmentEfficiency + socialCapital) / 3;
    document.getElementById('metricDevelopmentIndex').textContent = Math.round(developmentIndex);
}

// –§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
function generateEconomicReport() {
    if (!simulation) return;
    
    const stats = simulation.getStats();
    const report = `
üìä –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ DPPN
============================

üìÖ –ü–µ—Ä–∏–æ–¥: ${stats.month} –º–µ—Å—è—Ü–µ–≤
üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: ${stats.totalResidents} –∂–∏—Ç–µ–ª–µ–π

üí∏ –§–ò–ù–ê–ù–°–´:
‚Ä¢ –û–±—â–∏–π –ü–ü: ${Math.round(stats.totalPP)}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ü–ü: ${Math.round(stats.averagePP)}
‚Ä¢ –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ–Ω–¥—ã: ${Math.round(stats.publicFunds)}

üè¢ –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê:
‚Ä¢ –û–±—ä–µ–∫—Ç–æ–≤: ${stats.infrastructureCount}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–≤–∏—Ç–∏—è: ${stats.infrastructureLevel}
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${Math.round(stats.infrastructureEfficiency)}%

üíº –ò–ù–í–ï–°–¢–ò–¶–ò–ò:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: ${stats.activeInvestments}
‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: ${Math.round(stats.totalInvestment)}
‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: ${Math.round(stats.monthlyInvestmentIncome)}

üìà –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏: ${Math.round(calculateQualityOfLife(stats))}/100
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: ${Math.round(calculateStabilityIndex(simulation.history))}/100
    `;
    
    alert(report);
    console.log('üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç');
}

function generateSocialReport() {
    if (!simulation) return;
    
    const stats = simulation.getStats();
    const report = `
üë• –°–û–¶–ò–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ DPPN
========================

üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –ñ–∏—Ç–µ–ª–µ–π: ${stats.totalResidents}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(stats.averageSatisfaction)}%
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏: ${Math.round(calculateQualityOfLife(stats))}/100

üéØ –ê–ö–¢–ò–í–ù–û–°–¢–¨:
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: ${Math.round(stats.infrastructureLevels.education || 0)}/100
‚Ä¢ –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${Math.round(stats.infrastructureLevels.healthcare || 0)}/100
‚Ä¢ –ú–æ–±–∏–ª—å–Ω–æ—Å—Ç—å: ${Math.round(stats.infrastructureLevels.mobility || 0)}/100

üí∞ –°–û–¶–ò–ê–õ–¨–ù–´–ï –ò–ù–í–ï–°–¢–ò–¶–ò–ò:
‚Ä¢ –í –≥–æ–ª–æ—Å–∞: ${Math.round(stats.totalVotes)} –ü–ü
‚Ä¢ –í —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: ${Math.round(stats.totalSocial)} –ü–ü
‚Ä¢ –û–±—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∂–∏—Ç–µ–ª–µ–π: ${Math.round(stats.totalInvested)} –ü–ü

üìà –¢–ï–ù–î–ï–ù–¶–ò–ò:
‚Ä¢ –†–æ—Å—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: ${calculateSatisfactionTrend(simulation.history)}
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${calculateSocialActivity(stats)}
    `;
    
    alert(report);
    console.log('üë• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç');
}

function calculateSatisfactionTrend(history) {
    if (history.length < 2) return "—Å—Ç–∞–±–∏–ª—å–Ω–∞—è";
    
    const recent = history.slice(-3);
    const trend = recent[recent.length - 1].averageSatisfaction - recent[0].averageSatisfaction;
    
    if (trend > 5) return "—Ä–∞—Å—Ç—É—â–∞—è üìà";
    if (trend < -5) return "—Å–Ω–∏–∂–∞—é—â–∞—è—Å—è üìâ";
    return "—Å—Ç–∞–±–∏–ª—å–Ω–∞—è ‚û°Ô∏è";
}

function calculateSocialActivity(stats) {
    const activity = (stats.totalVotes + stats.totalSocial) / Math.max(1, stats.totalPP) * 100;
    
    if (activity > 20) return "–≤—ã—Å–æ–∫–∞—è üéØ";
    if (activity > 10) return "—Å—Ä–µ–¥–Ω—è—è üëç";
    return "–Ω–∏–∑–∫–∞—è üëé";
}

function generateInfrastructureReport() {
    if (!simulation) return;
    
    const stats = simulation.getStats();
    const report = `
üè¢ –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ù–´–ô –û–¢–ß–ï–¢ DPPN
================================

üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${stats.infrastructureCount}
‚Ä¢ –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${stats.infrastructureLevel}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${Math.round(stats.infrastructureEfficiency)}%

üéØ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:
${getInfrastructureDistribution(simulation.infrastructure)}

‚ö° –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: +${Math.round((stats.infrastructureLevels.education || 0) * 10)}%
‚Ä¢ –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: +${Math.round((stats.infrastructureLevels.healthcare || 0) * 10)}%
‚Ä¢ –ú–æ–±–∏–ª—å–Ω–æ—Å—Ç—å: +${Math.round((stats.infrastructureLevels.mobility || 0) * 10)}%
‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: +${Math.round((stats.infrastructureLevels.productivity || 0) * 10)}%

üí∞ –§–ò–ù–ê–ù–°–´:
‚Ä¢ –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ–Ω–¥—ã: ${Math.round(stats.publicFunds)} –ü–ü
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: ${Math.round(calculateMaintenanceNeed(simulation.infrastructure))} –ü–ü
    `;
    
    alert(report);
    console.log('üè¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –æ—Ç—á–µ—Ç');
}

function getInfrastructureDistribution(infrastructure) {
    const types = {};
    infrastructure.forEach(infra => {
        types[infra.type] = (types[infra.type] || 0) + 1;
    });
    
    let distribution = '';
    Object.keys(types).forEach(type => {
        const config = CONFIG.INFRASTRUCTURE_TYPES[type];
        distribution += `‚Ä¢ ${config.icon} ${config.name}: ${types[type]} –æ–±—ä–µ–∫—Ç–æ–≤\n`;
    });
    
    return distribution || '‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
}

function calculateMaintenanceNeed(infrastructure) {
    return infrastructure.reduce((sum, infra) => {
        if (infra.condition < 80) {
            return sum + infra.getMaintenanceCost();
        }
        return sum;
    }, 0);
}

function generateInvestmentReport() {
    if (!simulation) return;
    
    const stats = simulation.getStats();
    const report = `
üíº –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–´–ô –û–¢–ß–ï–¢ DPPN
=============================

üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${simulation.investments.length}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activeInvestments}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${stats.completedInvestments}

üí∞ –§–ò–ù–ê–ù–°–´:
‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: ${Math.round(stats.totalInvestment)} –ü–ü
‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: ${Math.round(stats.monthlyInvestmentIncome)} –ü–ü
‚Ä¢ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${Math.round(stats.monthlyInvestmentIncome / Math.max(1, stats.totalInvestment) * 1200)}%

üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø:
‚Ä¢ –¢–µ–∫—É—â–∞—è: ${getStrategyName(stats.investmentStrategy)}
‚Ä¢ –ê–≤—Ç–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: ${stats.autoInvestEnabled ? '–í–∫–ª—é—á–µ–Ω—ã ‚úÖ' : '–í—ã–∫–ª—é—á–µ–Ω—ã ‚ùå'}

üìà –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
${getInvestmentRecommendations(stats)}
    `;
    
    alert(report);
    console.log('üíº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç');
}

function getInvestmentRecommendations(stats) {
    const needs = simulation.analyzeSystemNeeds();
    const maxNeed = Math.max(needs.education, needs.healthcare, needs.technology, needs.business);
    
    let recommendations = '';
    
    if (maxNeed === needs.education) {
        recommendations = '‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã üéì\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å 1-2 –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞';
    } else if (maxNeed === needs.healthcare) {
        recommendations = '‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã üè•\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å 1-2 –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞';
    } else if (maxNeed === needs.technology) {
        recommendations = '‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã üî¨\n‚Ä¢ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫, –Ω–æ –≤—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å';
    } else {
        recommendations = '‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–µ–∫—Ç—ã üíº\n‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥, —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫';
    }
    
    if (stats.publicFunds < 1000) {
        recommendations += '\n‚Ä¢ ‚ö†Ô∏è –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ–Ω–¥–æ–≤';
    }
    
    return recommendations;
}

function exportAllData() {
    if (!simulation) return;
    
    const data = {
        simulation: {
            month: simulation.month,
            publicFunds: simulation.publicFunds,
            stats: simulation.getStats(),
            systemStats: simulation.systemStats
        },
        residents: simulation.residents.map(r => r.getDisplayData()),
        infrastructure: simulation.infrastructure.map(i => i.getDisplayData()),
        investments: simulation.investments.map(i => i.getDisplayData()),
        history: simulation.history,
        config: CONFIG,
        exportDate: new Date().toISOString()
    };
    
    const json = JSON.stringify(data, null, 2);
    downloadJSON(json, 'dppn_simulation_data.json');
    
    console.log('üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–º—É–ª—è—Ü–∏–∏');
}

function downloadJSON(json, filename) {
    const blob = new Blob([json], { type: 'application/json' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.setAttribute('hidden', '');
    a.setAttribute('href', url);
    a.setAttribute('download', filename);
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
}