// infrastructure-ui.js - UI –¥–ª—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
function updateInfrastructureList() {
    if (!window.simulation) return;
    
    const container = document.getElementById('infrastructureContainer');
    const stats = window.simulation.getStats();
    
    if (!container) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –±–∞–ª–∞–Ω—Å–æ–º
    const panel = document.querySelector('.infrastructure-panel h2');
    if (panel) {
        panel.textContent = `üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π | –ë–∞–ª–∞–Ω—Å: ${Math.round(stats.publicFunds)} –ü–ü`;
    }
    
    container.innerHTML = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
    window.simulation.infrastructure.forEach(infra => {
        const data = infra.getDisplayData();
        const card = document.createElement('div');
        card.className = 'infrastructure-card';
        
        let specificInfo = '';
        switch(data.category) {
            case 'energy':
                specificInfo = `<div>‚ö° –í—ã—Ä–∞–±–æ—Ç–∫–∞: ${data.energyOutput} –µ–¥.</div>`;
                break;
            case 'agriculture':
                specificInfo = `<div>üåæ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: ${data.foodOutput} –µ–¥.</div>`;
                break;
            case 'industry':
                specificInfo = `<div>üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: ${data.productionOutput} –µ–¥.</div>`;
                break;
            case 'commerce':
                specificInfo = `<div>üí∞ –î–æ—Ö–æ–¥: ${data.commerceOutput} –µ–¥.</div>`;
                break;
            default:
                specificInfo = `<div>üìä –≠—Ñ—Ñ–µ–∫—Ç: +${data.effectValue}%</div>`;
        }
        
        card.innerHTML = `
            <div class="card-header">
                <div class="card-title">${data.icon} ${data.name}</div>
                <div class="level-badge">–£—Ä–æ–≤–µ–Ω—å ${data.level}</div>
            </div>
            <div class="resident-details">
                <div>${data.description}</div>
                <div>üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${data.condition}%</div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${data.condition}%"></div>
                </div>
                <div>‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${data.efficiency}%</div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${data.efficiency}%"></div>
                </div>
                ${specificInfo}
                <div>üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: ${data.maintenanceCost} –ü–ü/–º–µ—Å—è—Ü</div>                
                <div>‚¨ÜÔ∏è –£–ª—É—á—à–µ–Ω–∏–µ: ${data.upgradeCost} –ü–ü (–ë–∞–ª–∞–Ω—Å: ${Math.round(stats.publicFunds)} –ü–ü)</div>
                <div class="investment-controls">
                    <button onclick="upgradeInfrastructure('${infra.id}')" class="success">‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å</button>
                    <button onclick="repairInfrastructure('${infra.id}')" class="warning">üîß –†–µ–º–æ–Ω—Ç</button>
                </div>
            </div>
        `;
        container.appendChild(card);
    });
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (window.simulation.infrastructure.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; padding: 2rem; color: #666;">
                <h3>üèóÔ∏è –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞</h3>
                <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤</p>
                <button onclick="showInfrastructureCosts()" class="info">üí∞ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞</button>
            </div>
        `;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
function upgradeInfrastructure(infrastructureId) {
    if (!window.simulation) return;
    
    const infra = window.simulation.infrastructure.find(i => i.id === infrastructureId);
    if (!infra) return;
    
    const upgradeCost = infra.getUpgradeCost();
    const stats = window.simulation.getStats();
    
    if (stats.publicFunds >= upgradeCost) {
        try {
            if (infra.upgrade()) {
                updateUI();
                alert(`‚úÖ ${infra.config.name} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${infra.level}!`);
            } else {
                alert('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è');
            }
        } catch (error) {
            alert(`‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è: ${error.message}`);
        }
    } else {
        alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: ${Math.round(upgradeCost)} –ü–ü | –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${Math.round(stats.publicFunds)} –ü–ü`);
    }
}

function repairInfrastructure(infrastructureId) {
    if (!window.simulation) return;
    
    const infra = window.simulation.infrastructure.find(i => i.id === infrastructureId);
    if (!infra) return;
    
    const repairCost = infra.getMaintenanceCost() * 2;
    const stats = window.simulation.getStats();
    
    if (stats.publicFunds >= repairCost) {
        window.simulation.publicFunds -= repairCost;
        infra.maintain();
        updateUI();
        alert(`‚úÖ ${infra.config.name} –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –∑–∞ ${Math.round(repairCost)} –ü–ü!`);
    } else {
        alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: ${Math.round(repairCost)} –ü–ü`);
    }
}