// UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
function updateInfrastructureList() {
    if (!simulation) return;
    
    const container = document.getElementById('infrastructureContainer');
    if (!container) return;
    
    container.innerHTML = '';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    updateInfrastructureStats();
    
    simulation.infrastructure.forEach(infra => {
        const data = infra.getDisplayData();
        const card = document.createElement('div');
        card.className = 'infrastructure-card';
        card.innerHTML = `
            <div class="card-header">
                <div class="card-title">${data.icon} ${data.name}</div>
                <div class="level-badge">–£—Ä. ${data.level}</div>
            </div>
            <div class="resident-details">
                <div>${data.description}</div>
                <div>üèóÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${data.condition}%</div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${data.condition}%"></div>
                </div>
                <div>‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${data.efficiency}%</div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${data.efficiency}%"></div>
                </div>
                <div>üìà –≠—Ñ—Ñ–µ–∫—Ç: +${data.effectValue}% –∫ ${getEffectName(data.effect)}</div>
                <div>üí∞ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: ${data.maintenanceCost} –ü–ü/–º–µ—Å</div>
                <div class="investment-controls">
                    <button onclick="upgradeInfrastructure('${infra.id}')" class="success">‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å</button>
                    <button onclick="repairInfrastructure('${infra.id}')" class="warning">üîß –†–µ–º–æ–Ω—Ç</button>
                </div>
            </div>
        `;
        container.appendChild(card);
    });
    
    console.log(`üè¢ –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${simulation.infrastructure.length} –æ–±—ä–µ–∫—Ç–æ–≤`);
}

function updateInfrastructureStats() {
    if (!simulation) return;
    
    const stats = simulation.getStats();
    const levels = stats.infrastructureLevels;
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    document.getElementById('statInfrastructure').textContent = simulation.infrastructure.length;
    document.getElementById('statInfraLevel').textContent = stats.infrastructureLevel;
    document.getElementById('statInfraEfficiency').textContent = Math.round(stats.infrastructureEfficiency);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    const schools = simulation.infrastructure.filter(i => i.type === 'SCHOOL');
    const hospitals = simulation.infrastructure.filter(i => i.type === 'HOSPITAL');
    const transport = simulation.infrastructure.filter(i => i.type === 'TRANSPORT');
    const energy = simulation.infrastructure.filter(i => i.type === 'ENERGY');
    
    document.getElementById('infraEducationLevel').textContent = Math.round(levels.education || 0);
    document.getElementById('infraSchoolsCount').textContent = schools.length;
    document.getElementById('infraEducationBonus').textContent = Math.round((levels.education || 0) * 10);
    
    document.getElementById('infraHealthLevel').textContent = Math.round(levels.healthcare || 0);
    document.getElementById('infraHospitalsCount').textContent = hospitals.length;
    document.getElementById('infraHealthBonus').textContent = Math.round((levels.healthcare || 0) * 10);
    
    document.getElementById('infraTransportLevel').textContent = Math.round(levels.mobility || 0);
    document.getElementById('infraTransportCount').textContent = transport.length;
    document.getElementById('infraTransportBonus').textContent = Math.round((levels.mobility || 0) * 10);
    
    document.getElementById('infraEnergyLevel').textContent = Math.round(levels.productivity || 0);
    document.getElementById('infraEnergyCount').textContent = energy.length;
    document.getElementById('infraEnergyBonus').textContent = Math.round((levels.productivity || 0) * 10);
}

function getEffectName(effect) {
    const effects = {
        'education': '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é',
        'healthcare': '–∑–¥–æ—Ä–æ–≤—å—é',
        'mobility': '–º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏',
        'productivity': '–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
    };
    return effects[effect] || effect;
}

function repairInfrastructure(infrastructureId) {
    if (!simulation) return;
    
    const infra = simulation.infrastructure.find(i => i.id === infrastructureId);
    if (!infra) return;
    
    const repairCost = infra.getMaintenanceCost() * 2;
    
    if (simulation.publicFunds >= repairCost) {
        simulation.publicFunds -= repairCost;
        infra.maintain();
        updateUI();
        
        console.log(`üîß –û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ${CONFIG.INFRASTRUCTURE_TYPES[infra.type].name}`);
        alert(`‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${Math.round(repairCost)} –ü–ü!`);
    } else {
        alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞. –ù—É–∂–Ω–æ: ${Math.round(repairCost)} –ü–ü`);
    }
}