// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DPPN —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
function checkDependencies() {
    if (typeof Resident === 'undefined') {
        throw new Error('–ö–ª–∞—Å—Å Resident –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
    if (typeof Infrastructure === 'undefined') {
        throw new Error('–ö–ª–∞—Å—Å Infrastructure –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
    if (typeof Investment === 'undefined') {
        throw new Error('–ö–ª–∞—Å—Å Investment –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
    if (typeof DPPSimulation === 'undefined') {
        throw new Error('–ö–ª–∞—Å—Å DPPSimulation –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
    if (typeof CONFIG === 'undefined') {
        throw new Error('CONFIG –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
}

function initializeApp() {
    try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DPPN —Å–∏–º—É–ª—è—Ç–æ—Ä–∞...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        checkDependencies();
        
        // –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        window.simulation = new DPPSimulation();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π
        window.simulation.addResidents(CONFIG.DEFAULT_RESIDENTS);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∂–∏–∑–Ω–∏
        try {
            window.simulation.publicFunds = 5000;
            // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∂–∏–∑–Ω–∏
            window.simulation.buildInfrastructure('SCHOOL');
            window.simulation.buildInfrastructure('HOSPITAL');
            window.simulation.buildInfrastructure('TRANSPORT');
            window.simulation.buildInfrastructure('FARM');
            window.simulation.buildInfrastructure('SOLAR_PLANT');
            window.simulation.buildInfrastructure('WATER_PLANT');
            window.simulation.buildInfrastructure('MARKET');
            window.simulation.buildInfrastructure('PARK');
            
            console.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞');
        } catch (e) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É:', e.message);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if (typeof initTabs === 'function') initTabs();
        updateUI();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setupGlobalHandlers();
        
        console.log('‚úÖ DPPN —Å–∏–º—É–ª—è—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
        console.log('üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', window.simulation.getStats());
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞: ' + error.message);
    }
}

function updateUI() {
    if (!window.simulation) return;
    
    try {
        const stats = window.simulation.getStats();
        
        // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        document.getElementById('statMonth').textContent = stats.month;
        document.getElementById('statResidents').textContent = stats.totalResidents;
        document.getElementById('statTotalPP').textContent = Math.round(stats.totalPP);
        document.getElementById('statAvgPP').textContent = Math.round(stats.averagePP);
        document.getElementById('statMoney').textContent = Math.round(stats.totalMoney || 0);
        document.getElementById('statVotes').textContent = Math.round(stats.totalVotes || 0);
        document.getElementById('statSocial').textContent = Math.round(stats.totalSocial || 0);
        document.getElementById('statPublicFunds').textContent = Math.round(stats.publicFunds || 0);
        document.getElementById('statTotalInvested').textContent = Math.round(stats.totalInvested || 0);
        document.getElementById('statAutoInvestments').textContent = stats.autoInvestEnabled ? '–í–∫–ª' : '–í—ã–∫–ª';
        
        // –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        document.getElementById('statInfrastructure').textContent = stats.infrastructureCount || 0;
        document.getElementById('statInfraLevel').textContent = stats.infrastructureLevel || 0;
        document.getElementById('statInfraEfficiency').textContent = Math.round(stats.infrastructureEfficiency || 0);
        document.getElementById('statEducation').textContent = Math.round((stats.infrastructureLevels?.education || 0));
        document.getElementById('statHealthcare').textContent = Math.round((stats.infrastructureLevels?.healthcare || 0));
        
        // –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        document.getElementById('statActiveInvestments').textContent = stats.activeInvestments || 0;
        document.getElementById('statCompletedInvestments').textContent = stats.completedInvestments || 0;
        document.getElementById('statTotalInvestment').textContent = Math.round(stats.totalInvestment || 0);
        document.getElementById('statInvestmentReturn').textContent = Math.round(stats.monthlyInvestmentIncome || 0);
        document.getElementById('statInvestmentStrategy').textContent = getStrategyName(stats.investmentStrategy);
        
        document.getElementById('currentResidents').textContent = stats.totalResidents;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ UI
        if (typeof updateResidentsList === 'function') updateResidentsList();
        if (typeof updateInfrastructureList === 'function') updateInfrastructureList();
        if (typeof updateInvestmentsList === 'function') updateInvestmentsList();
        if (typeof updateAnalytics === 'function') updateAnalytics();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        const autoInvestBtn = document.getElementById('autoInvestBtn');
        if (autoInvestBtn) {
            if (stats.autoInvestEnabled) {
                autoInvestBtn.textContent = '‚úÖ –ê–≤—Ç–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: –í–∫–ª';
                autoInvestBtn.className = 'success';
            } else {
                autoInvestBtn.textContent = 'üö´ –ê–≤—Ç–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: –í—ã–∫–ª';
                autoInvestBtn.className = '';
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        const strategySelect = document.getElementById('investmentStrategy');
        if (strategySelect && stats.investmentStrategy) {
            strategySelect.value = stats.investmentStrategy;
        }
        
        console.log('üîÑ UI –æ–±–Ω–æ–≤–ª–µ–Ω');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI:', error);
    }
}

function getStrategyName(strategy) {
    const names = {
        'conservative': '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è',
        'balanced': '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è',
        'aggressive': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è'
    };
    return names[strategy] || strategy || '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è';
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
function addResidents() {
    if (!window.simulation) {
        console.error('–°–∏–º—É–ª—è—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return;
    }
    
    const countInput = document.getElementById('residentCount');
    if (!countInput) {
        console.error('–ü–æ–ª–µ residentCount –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    const count = parseInt(countInput.value) || 1;
    const currentCount = window.simulation.residents.length;
    const newTotal = currentCount + count;
    
    if (newTotal > CONFIG.MAX_RESIDENTS) {
        alert(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ç–µ–ª–µ–π: ${CONFIG.MAX_RESIDENTS}`);
        return;
    }
    
    console.log(`üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ${count} –∂–∏—Ç–µ–ª–µ–π...`);
    window.simulation.addResidents(count);
    updateUI();
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${count} –∂–∏—Ç–µ–ª–µ–π. –¢–µ–ø–µ—Ä—å: ${window.simulation.residents.length}`);
}

function removeResidents() {
    if (!window.simulation) return;
    
    const countInput = document.getElementById('residentCount');
    const count = parseInt(countInput.value) || 1;
    const currentCount = window.simulation.residents.length;
    const newTotal = currentCount - count;
    
    if (newTotal < CONFIG.MIN_RESIDENTS) {
        alert(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ç–µ–ª–µ–π: ${CONFIG.MIN_RESIDENTS}`);
        return;
    }
    
    console.log(`üë• –£–¥–∞–ª–µ–Ω–∏–µ ${count} –∂–∏—Ç–µ–ª–µ–π...`);
    window.simulation.removeResidents(count);
    updateUI();
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${count} –∂–∏—Ç–µ–ª–µ–π. –¢–µ–ø–µ—Ä—å: ${window.simulation.residents.length}`);
}

function simulateMonth() {
    if (!window.simulation) return;
    
    console.log('üìÖ –°–∏–º—É–ª—è—Ü–∏—è –º–µ—Å—è—Ü–∞...');
    window.simulation.simulateMonth();
    updateUI();
    console.log('‚úÖ –ú–µ—Å—è—Ü —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω');
}

function autoConvert() {
    if (!window.simulation) return;
    
    console.log('üîÑ –ê–≤—Ç–æ-–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è...');
    const totalConverted = window.simulation.autoConvert();
    updateUI();
    console.log(`‚úÖ –ê–≤—Ç–æ-–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${Math.round(totalConverted)} –ü–ü`);
}

function startAutoSimulation() {
    if (!window.simulationInterval) {
        console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ-—Å–∏–º—É–ª—è—Ü–∏–∏...');
        window.simulationInterval = setInterval(() => {
            simulateMonth();
            if (Math.random() < 0.3) {
                autoConvert();
            }
        }, 2000);
    }
}

function stopAutoSimulation() {
    if (window.simulationInterval) {
        console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ-—Å–∏–º—É–ª—è—Ü–∏–∏...');
        clearInterval(window.simulationInterval);
        window.simulationInterval = null;
    }
}

function resetSimulation() {
    console.log('üóëÔ∏è –°–±—Ä–æ—Å —Å–∏–º—É–ª—è—Ü–∏–∏...');
    stopAutoSimulation();
    
    if (window.simulation) {
        window.simulation.reset();
        window.simulation.addResidents(CONFIG.DEFAULT_RESIDENTS);
        
        try {
            window.simulation.publicFunds = 5000;
            window.simulation.buildInfrastructure('SCHOOL');
            window.simulation.buildInfrastructure('HOSPITAL');
            window.simulation.buildInfrastructure('TRANSPORT');
            window.simulation.buildInfrastructure('FARM');
            window.simulation.buildInfrastructure('SOLAR_PLANT');
            window.simulation.buildInfrastructure('WATER_PLANT');
            window.simulation.buildInfrastructure('MARKET');
            window.simulation.buildInfrastructure('PARK');
        } catch (e) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É:', e.message);
        }
        
        updateUI();
    }
    console.log('‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞');
}

function updateCoefficients() {
    if (!window.simulation) return;
    
    const newConfig = {
        BASE_PP_PER_MONTH: parseInt(document.getElementById('basePP').value) || 100,
        VOLUNTEER_PP_BONUS: parseInt(document.getElementById('volunteerBonus').value) || 50,
        EDUCATION_PP_BONUS: parseInt(document.getElementById('educationBonus').value) || 30,
        MAX_MONEY_CONVERSION: (parseInt(document.getElementById('moneyLimit').value) || 30) / 100
    };
    
    window.simulation.updateConfig(newConfig);
    updateUI();
    
    alert('‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    console.log('‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:', newConfig);
}

function toggleAutoInvest() {
    if (!window.simulation) return;
    
    window.simulation.autoInvestEnabled = !window.simulation.autoInvestEnabled;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–ø—Ä—è–º—É—é
    const autoInvestBtn = document.getElementById('autoInvestBtn');
    if (autoInvestBtn) {
        if (window.simulation.autoInvestEnabled) {
            autoInvestBtn.textContent = '‚úÖ –ê–≤—Ç–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: –í–∫–ª';
            autoInvestBtn.className = 'success';
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
            startAutoInvestments();
        } else {
            autoInvestBtn.textContent = 'üö´ –ê–≤—Ç–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: –í—ã–∫–ª';
            autoInvestBtn.className = '';
        }
    }
    
    console.log(`ü§ñ –ê–≤—Ç–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: ${window.simulation.autoInvestEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}`);
}

function showFinancialInfo() {
    if (!window.simulation) return;
    
    const stats = window.simulation.getStats();
    let message = `üí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n\n`;
    message += `üìä –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°: ${Math.round(stats.publicFunds)} –ü–ü\n\n`;
    message += `üìà –ò–°–¢–û–ß–ù–ò–ö–ò –ü–û–ü–û–õ–ù–ï–ù–ò–Ø:\n`;
    message += `‚Ä¢ –ù–∞–ª–æ–≥–∏ —Å –∂–∏—Ç–µ–ª–µ–π: ~${stats.totalResidents * 20} –ü–ü/–º–µ—Å—è—Ü\n`;
    message += `‚Ä¢ –î–æ—Ö–æ–¥—ã –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${Math.round(stats.monthlyInvestmentIncome)} –ü–ü/–º–µ—Å—è—Ü\n\n`;
    message += `üìâ –†–ê–°–•–û–î–´:\n`;
    message += `‚Ä¢ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ~${stats.infrastructureCount * 50} –ü–ü/–º–µ—Å—è—Ü\n`;
    message += `‚Ä¢ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: 500-10000 –ü–ü\n\n`;
    message += `üí° –°–û–í–ï–¢: –°–ª–µ–¥–∏—Ç–µ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º! –ü—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑—Ä—É—à–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ.`;
    
    alert(message);
}

function startAutoInvestments() {
    if (!window.simulation || !window.simulation.autoInvestEnabled) return;
    
    console.log('üí∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π...');
    
    // –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º –≤ —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    const investmentTypes = Object.keys(CONFIG.INVESTMENT_TYPES);
    const randomType = investmentTypes[Math.floor(Math.random() * investmentTypes.length)];
    
    try {
        createInvestment(randomType);
        
        // –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç –∂–∏—Ç–µ–ª–µ–π
        window.simulation.residents.forEach(resident => {
            if (resident.pp > 100 && Math.random() < 0.3) {
                const investmentAmount = resident.pp * 0.1; // 10% –æ—Ç –ü–ü
                const activeInvestments = window.simulation.investments.filter(inv => !inv.isCompleted);
                
                if (activeInvestments.length > 0) {
                    const randomProject = activeInvestments[Math.floor(Math.random() * activeInvestments.length)];
                    resident.investInProject(randomProject, investmentAmount);
                }
            }
        });
        
        console.log(`üíº –ê–≤—Ç–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –ø—Ä–æ–µ–∫—Ç: ${CONFIG.INVESTMENT_TYPES[randomType]?.name}`);
    } catch (error) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é:', error.message);
    }
    
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (window.simulation.autoInvestEnabled) {
        setTimeout(startAutoInvestments, 5000);
    }
}

function changeInvestmentStrategy() {
    if (!window.simulation) return;
    
    const select = document.getElementById('investmentStrategy');
    window.simulation.investmentStrategy = select.value;
    
    updateUI();
    console.log(`üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${select.value}`);
}

function createSmartProject() {
    if (!window.simulation) return;
    
    const needs = window.simulation.analyzeSystemNeeds();
    let projectType = '';
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –Ω–∞–∏–±–æ–ª—å—à–µ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
    const maxNeed = Math.max(needs.education, needs.healthcare, needs.technology, needs.business);
    
    if (maxNeed === needs.education) {
        projectType = 'ONLINE_EDUCATION';
    } else if (maxNeed === needs.healthcare) {
        projectType = 'BIOTECH';
    } else if (maxNeed === needs.technology) {
        projectType = 'SOFTWARE_DEV';
    } else {
        projectType = 'RETAIL_BUSINESS';
    }
    
    createInvestment(projectType);
    console.log(`üéØ –°–æ–∑–¥–∞–Ω —É–º–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: ${CONFIG.INVESTMENT_TYPES[projectType]?.name || projectType}`);
}

function buildInfrastructure(type) {
    if (!window.simulation) return;
    
    try {
        const infrastructure = window.simulation.buildInfrastructure(type);
        updateUI();
        
        const config = CONFIG.INFRASTRUCTURE_TYPES[type];
        console.log(`üèóÔ∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ${config.name}`);
        return infrastructure;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:', error);
        alert(`–û—à–∏–±–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞: ${error.message}`);
    }
}

function showInfrastructureCosts() {
    if (!window.simulation) return;
    
    const stats = window.simulation.getStats();
    let message = `üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${Math.round(stats.publicFunds)} –ü–ü\n\n`;
    message += `üìä –î–æ—Ö–æ–¥—ã:\n`;
    message += `‚Ä¢ –ñ–∏—Ç–µ–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç: ${stats.totalResidents * 100} –ü–ü/–º–µ—Å—è—Ü\n`;
    message += `‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç: ${Math.round(stats.monthlyInvestmentIncome)} –ü–ü/–º–µ—Å—è—Ü\n\n`;
    message += `üèóÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    const sampleInfrastructure = ['SCHOOL', 'HOSPITAL', 'SOLAR_PLANT', 'FARM'];
    sampleInfrastructure.forEach(type => {
        const config = CONFIG.INFRASTRUCTURE_TYPES[type];
        if (config) {
            message += `‚Ä¢ ${config.icon} ${config.name}: ${config.cost} –ü–ü\n`;
        }
    });
    
    alert(message);
}

function createInvestment(type) {
    if (!window.simulation) return;
    
    try {
        const investment = window.simulation.createInvestment(type);
        updateUI();
        
        console.log(`üíº –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: ${CONFIG.INVESTMENT_TYPES[type]?.name || type}`);
        return investment;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
        alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`);
    }
}

function autoMaintainInfrastructure() {
    if (!window.simulation) return;
    
    let maintainedCount = 0;
    let totalCost = 0;
    
    window.simulation.infrastructure.forEach(infra => {
        if (infra.condition < 80 && window.simulation.publicFunds >= infra.getMaintenanceCost()) {
            window.simulation.publicFunds -= infra.getMaintenanceCost();
            infra.maintain();
            maintainedCount++;
            totalCost += infra.getMaintenanceCost();
        }
    });
    
    if (maintainedCount > 0) {
        updateUI();
        console.log(`üîß –û–±—Å–ª—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${maintainedCount}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${Math.round(totalCost)} –ü–ü`);
        alert(`‚úÖ –û–±—Å–ª—É–∂–µ–Ω–æ ${maintainedCount} –æ–±—ä–µ–∫—Ç–æ–≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞ ${Math.round(totalCost)} –ü–ü`);
    } else {
        alert('‚ùå –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
    }
}

function analyzeInvestmentNeeds() {
    if (!window.simulation) return;
    
    const needs = window.simulation.analyzeSystemNeeds();
    const report = `
üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö:

üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: ${Math.round(needs.education)}%
üè• –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${Math.round(needs.healthcare)}%
üî¨ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: ${Math.round(needs.technology)}%
üíº –ë–∏–∑–Ω–µ—Å: ${Math.round(needs.business)}%

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${getInvestmentRecommendation(needs)}
    `;
    
    alert(report);
    console.log('üìà –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π:', needs);
}

function getInvestmentRecommendation(needs) {
    const maxNeed = Math.max(needs.education, needs.healthcare, needs.technology, needs.business);
    
    if (maxNeed === needs.education) {
        return "–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç";
    } else if (maxNeed === needs.healthcare) {
        return "–°–æ–∑–¥–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç";
    } else if (maxNeed === needs.technology) {
        return "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç";
    } else {
        return "–°–æ–∑–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–µ–∫—Ç";
    }
}

function setupGlobalHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Enter –≤ –ø–æ–ª–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏—Ç–µ–ª–µ–π
    const residentCountInput = document.getElementById('residentCount');
    if (residentCountInput) {
        residentCountInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addResidents();
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∂–∏—Ç–µ–ª–µ–π
    const searchInput = document.getElementById('searchResident');
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            if (typeof searchResidents === 'function') {
                searchResidents();
            }
        });
    }
    
    console.log('üéØ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', initializeApp);

console.log('üìÅ main.js –∑–∞–≥—Ä—É–∂–µ–Ω');